# coding: utf-8

"""
    Fax.to REST API client for Python

    This is Fax.to REST API client for Python.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: inquiries@fax.to
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2009(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'user_id': 'int',
        'created_date': 'datetime',
        'id': 'int',
        'filename': 'str',
        'orig_filename': 'str',
        'preview_file': 'str',
        'preview_image': 'str',
        'preview_in_storage': 'int',
        'file_extension': 'str',
        'filename_uploaded': 'str',
        'filesize': 'str',
        's3': 'int',
        'server_document_id': 'int',
        'team_user_id': 'int',
        'total_pages': 'int',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'status': 'status',
        'user_id': 'user_id',
        'created_date': 'created_date',
        'id': 'id',
        'filename': 'filename',
        'orig_filename': 'orig_filename',
        'preview_file': 'preview_file',
        'preview_image': 'preview_image',
        'preview_in_storage': 'preview_in_storage',
        'file_extension': 'file_extension',
        'filename_uploaded': 'filename_uploaded',
        'filesize': 'filesize',
        's3': 's3',
        'server_document_id': 'server_document_id',
        'team_user_id': 'team_user_id',
        'total_pages': 'total_pages',
        'updated_at': 'updated_at'
    }

    def __init__(self, status=None, user_id=None, created_date=None, id=None, filename=None, orig_filename=None, preview_file=None, preview_image=None, preview_in_storage=None, file_extension=None, filename_uploaded=None, filesize=None, s3=None, server_document_id=None, team_user_id=None, total_pages=None, updated_at=None):  # noqa: E501
        """InlineResponse2009 - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._user_id = None
        self._created_date = None
        self._id = None
        self._filename = None
        self._orig_filename = None
        self._preview_file = None
        self._preview_image = None
        self._preview_in_storage = None
        self._file_extension = None
        self._filename_uploaded = None
        self._filesize = None
        self._s3 = None
        self._server_document_id = None
        self._team_user_id = None
        self._total_pages = None
        self._updated_at = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if user_id is not None:
            self.user_id = user_id
        if created_date is not None:
            self.created_date = created_date
        if id is not None:
            self.id = id
        if filename is not None:
            self.filename = filename
        if orig_filename is not None:
            self.orig_filename = orig_filename
        if preview_file is not None:
            self.preview_file = preview_file
        if preview_image is not None:
            self.preview_image = preview_image
        if preview_in_storage is not None:
            self.preview_in_storage = preview_in_storage
        if file_extension is not None:
            self.file_extension = file_extension
        if filename_uploaded is not None:
            self.filename_uploaded = filename_uploaded
        if filesize is not None:
            self.filesize = filesize
        if s3 is not None:
            self.s3 = s3
        if server_document_id is not None:
            self.server_document_id = server_document_id
        if team_user_id is not None:
            self.team_user_id = team_user_id
        if total_pages is not None:
            self.total_pages = total_pages
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def status(self):
        """Gets the status of this InlineResponse2009.  # noqa: E501


        :return: The status of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2009.


        :param status: The status of this InlineResponse2009.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse2009.  # noqa: E501


        :return: The user_id of this InlineResponse2009.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse2009.


        :param user_id: The user_id of this InlineResponse2009.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def created_date(self):
        """Gets the created_date of this InlineResponse2009.  # noqa: E501


        :return: The created_date of this InlineResponse2009.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this InlineResponse2009.


        :param created_date: The created_date of this InlineResponse2009.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def id(self):
        """Gets the id of this InlineResponse2009.  # noqa: E501


        :return: The id of this InlineResponse2009.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2009.


        :param id: The id of this InlineResponse2009.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def filename(self):
        """Gets the filename of this InlineResponse2009.  # noqa: E501


        :return: The filename of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this InlineResponse2009.


        :param filename: The filename of this InlineResponse2009.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def orig_filename(self):
        """Gets the orig_filename of this InlineResponse2009.  # noqa: E501


        :return: The orig_filename of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._orig_filename

    @orig_filename.setter
    def orig_filename(self, orig_filename):
        """Sets the orig_filename of this InlineResponse2009.


        :param orig_filename: The orig_filename of this InlineResponse2009.  # noqa: E501
        :type: str
        """

        self._orig_filename = orig_filename

    @property
    def preview_file(self):
        """Gets the preview_file of this InlineResponse2009.  # noqa: E501


        :return: The preview_file of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._preview_file

    @preview_file.setter
    def preview_file(self, preview_file):
        """Sets the preview_file of this InlineResponse2009.


        :param preview_file: The preview_file of this InlineResponse2009.  # noqa: E501
        :type: str
        """

        self._preview_file = preview_file

    @property
    def preview_image(self):
        """Gets the preview_image of this InlineResponse2009.  # noqa: E501


        :return: The preview_image of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._preview_image

    @preview_image.setter
    def preview_image(self, preview_image):
        """Sets the preview_image of this InlineResponse2009.


        :param preview_image: The preview_image of this InlineResponse2009.  # noqa: E501
        :type: str
        """

        self._preview_image = preview_image

    @property
    def preview_in_storage(self):
        """Gets the preview_in_storage of this InlineResponse2009.  # noqa: E501


        :return: The preview_in_storage of this InlineResponse2009.  # noqa: E501
        :rtype: int
        """
        return self._preview_in_storage

    @preview_in_storage.setter
    def preview_in_storage(self, preview_in_storage):
        """Sets the preview_in_storage of this InlineResponse2009.


        :param preview_in_storage: The preview_in_storage of this InlineResponse2009.  # noqa: E501
        :type: int
        """

        self._preview_in_storage = preview_in_storage

    @property
    def file_extension(self):
        """Gets the file_extension of this InlineResponse2009.  # noqa: E501


        :return: The file_extension of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this InlineResponse2009.


        :param file_extension: The file_extension of this InlineResponse2009.  # noqa: E501
        :type: str
        """

        self._file_extension = file_extension

    @property
    def filename_uploaded(self):
        """Gets the filename_uploaded of this InlineResponse2009.  # noqa: E501


        :return: The filename_uploaded of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._filename_uploaded

    @filename_uploaded.setter
    def filename_uploaded(self, filename_uploaded):
        """Sets the filename_uploaded of this InlineResponse2009.


        :param filename_uploaded: The filename_uploaded of this InlineResponse2009.  # noqa: E501
        :type: str
        """

        self._filename_uploaded = filename_uploaded

    @property
    def filesize(self):
        """Gets the filesize of this InlineResponse2009.  # noqa: E501


        :return: The filesize of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this InlineResponse2009.


        :param filesize: The filesize of this InlineResponse2009.  # noqa: E501
        :type: str
        """

        self._filesize = filesize

    @property
    def s3(self):
        """Gets the s3 of this InlineResponse2009.  # noqa: E501


        :return: The s3 of this InlineResponse2009.  # noqa: E501
        :rtype: int
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this InlineResponse2009.


        :param s3: The s3 of this InlineResponse2009.  # noqa: E501
        :type: int
        """

        self._s3 = s3

    @property
    def server_document_id(self):
        """Gets the server_document_id of this InlineResponse2009.  # noqa: E501


        :return: The server_document_id of this InlineResponse2009.  # noqa: E501
        :rtype: int
        """
        return self._server_document_id

    @server_document_id.setter
    def server_document_id(self, server_document_id):
        """Sets the server_document_id of this InlineResponse2009.


        :param server_document_id: The server_document_id of this InlineResponse2009.  # noqa: E501
        :type: int
        """

        self._server_document_id = server_document_id

    @property
    def team_user_id(self):
        """Gets the team_user_id of this InlineResponse2009.  # noqa: E501


        :return: The team_user_id of this InlineResponse2009.  # noqa: E501
        :rtype: int
        """
        return self._team_user_id

    @team_user_id.setter
    def team_user_id(self, team_user_id):
        """Sets the team_user_id of this InlineResponse2009.


        :param team_user_id: The team_user_id of this InlineResponse2009.  # noqa: E501
        :type: int
        """

        self._team_user_id = team_user_id

    @property
    def total_pages(self):
        """Gets the total_pages of this InlineResponse2009.  # noqa: E501


        :return: The total_pages of this InlineResponse2009.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this InlineResponse2009.


        :param total_pages: The total_pages of this InlineResponse2009.  # noqa: E501
        :type: int
        """

        self._total_pages = total_pages

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse2009.  # noqa: E501


        :return: The updated_at of this InlineResponse2009.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse2009.


        :param updated_at: The updated_at of this InlineResponse2009.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
