# coding: utf-8

"""
    Fax.to REST API client for Python

    This is Fax.to REST API client for Python.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: inquiries@fax.to
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20012Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'slug': 'str',
        'a2_code': 'str',
        'dial_code': 'int'
    }

    attribute_map = {
        'country': 'country',
        'slug': 'slug',
        'a2_code': 'a2_code',
        'dial_code': 'dial_code'
    }

    def __init__(self, country=None, slug=None, a2_code=None, dial_code=None):  # noqa: E501
        """InlineResponse20012Data - a model defined in Swagger"""  # noqa: E501

        self._country = None
        self._slug = None
        self._a2_code = None
        self._dial_code = None
        self.discriminator = None

        if country is not None:
            self.country = country
        if slug is not None:
            self.slug = slug
        if a2_code is not None:
            self.a2_code = a2_code
        if dial_code is not None:
            self.dial_code = dial_code

    @property
    def country(self):
        """Gets the country of this InlineResponse20012Data.  # noqa: E501


        :return: The country of this InlineResponse20012Data.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InlineResponse20012Data.


        :param country: The country of this InlineResponse20012Data.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def slug(self):
        """Gets the slug of this InlineResponse20012Data.  # noqa: E501


        :return: The slug of this InlineResponse20012Data.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this InlineResponse20012Data.


        :param slug: The slug of this InlineResponse20012Data.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def a2_code(self):
        """Gets the a2_code of this InlineResponse20012Data.  # noqa: E501


        :return: The a2_code of this InlineResponse20012Data.  # noqa: E501
        :rtype: str
        """
        return self._a2_code

    @a2_code.setter
    def a2_code(self, a2_code):
        """Sets the a2_code of this InlineResponse20012Data.


        :param a2_code: The a2_code of this InlineResponse20012Data.  # noqa: E501
        :type: str
        """

        self._a2_code = a2_code

    @property
    def dial_code(self):
        """Gets the dial_code of this InlineResponse20012Data.  # noqa: E501


        :return: The dial_code of this InlineResponse20012Data.  # noqa: E501
        :rtype: int
        """
        return self._dial_code

    @dial_code.setter
    def dial_code(self, dial_code):
        """Sets the dial_code of this InlineResponse20012Data.


        :param dial_code: The dial_code of this InlineResponse20012Data.  # noqa: E501
        :type: int
        """

        self._dial_code = dial_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20012Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
