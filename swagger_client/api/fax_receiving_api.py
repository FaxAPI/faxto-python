# coding: utf-8

"""
    Fax.to REST API client for Python

    This is Fax.to REST API client for Python.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: inquiries@fax.to
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FaxReceivingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def area_codes_country_code_state_id_get(self, country_code, state_id, api_key, **kwargs):  # noqa: E501
        """This API gets a list of countries with its area code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.area_codes_country_code_state_id_get(country_code, state_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param int country_code: Indicates the country code in its ISO 3166-1 alpha-3 format (required)
        :param int state_id: The numerical identifier for the state (required)
        :param str api_key: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.area_codes_country_code_state_id_get_with_http_info(country_code, state_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.area_codes_country_code_state_id_get_with_http_info(country_code, state_id, api_key, **kwargs)  # noqa: E501
            return data

    def area_codes_country_code_state_id_get_with_http_info(self, country_code, state_id, api_key, **kwargs):  # noqa: E501
        """This API gets a list of countries with its area code  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.area_codes_country_code_state_id_get_with_http_info(country_code, state_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param int country_code: Indicates the country code in its ISO 3166-1 alpha-3 format (required)
        :param int state_id: The numerical identifier for the state (required)
        :param str api_key: (required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country_code', 'state_id', 'api_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method area_codes_country_code_state_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country_code' is set
        if ('country_code' not in params or
                params['country_code'] is None):
            raise ValueError("Missing the required parameter `country_code` when calling `area_codes_country_code_state_id_get`")  # noqa: E501
        # verify the required parameter 'state_id' is set
        if ('state_id' not in params or
                params['state_id'] is None):
            raise ValueError("Missing the required parameter `state_id` when calling `area_codes_country_code_state_id_get`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `area_codes_country_code_state_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'country_code' in params:
            path_params['COUNTRY_CODE'] = params['country_code']  # noqa: E501
        if 'state_id' in params:
            path_params['STATE_ID'] = params['state_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_key' in params:
            header_params['api_key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/areacodes/{COUNTRY_CODE}/{STATE_ID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def countries_country_code_did_groups_get(self, country_code, area_code, api_key, **kwargs):  # noqa: E501
        """This API gets a list of DID groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.countries_country_code_did_groups_get(country_code, area_code, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param int country_code: Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format (required)
        :param int area_code: The area code of the DID group (required)
        :param str api_key: (required)
        :param int did_group_ids: Used to display more information about specific DID groups
        :param int state_id: The numerical identifier for the didGroup's state
        :param int city_name_pattern: A string pattern for the beginning of city name
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.countries_country_code_did_groups_get_with_http_info(country_code, area_code, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.countries_country_code_did_groups_get_with_http_info(country_code, area_code, api_key, **kwargs)  # noqa: E501
            return data

    def countries_country_code_did_groups_get_with_http_info(self, country_code, area_code, api_key, **kwargs):  # noqa: E501
        """This API gets a list of DID groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.countries_country_code_did_groups_get_with_http_info(country_code, area_code, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param int country_code: Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format (required)
        :param int area_code: The area code of the DID group (required)
        :param str api_key: (required)
        :param int did_group_ids: Used to display more information about specific DID groups
        :param int state_id: The numerical identifier for the didGroup's state
        :param int city_name_pattern: A string pattern for the beginning of city name
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country_code', 'area_code', 'api_key', 'did_group_ids', 'state_id', 'city_name_pattern']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method countries_country_code_did_groups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country_code' is set
        if ('country_code' not in params or
                params['country_code'] is None):
            raise ValueError("Missing the required parameter `country_code` when calling `countries_country_code_did_groups_get`")  # noqa: E501
        # verify the required parameter 'area_code' is set
        if ('area_code' not in params or
                params['area_code'] is None):
            raise ValueError("Missing the required parameter `area_code` when calling `countries_country_code_did_groups_get`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `countries_country_code_did_groups_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'country_code' in params:
            path_params['COUNTRY_CODE'] = params['country_code']  # noqa: E501

        query_params = []
        if 'did_group_ids' in params:
            query_params.append(('didGroupIds', params['did_group_ids']))  # noqa: E501
        if 'state_id' in params:
            query_params.append(('stateId', params['state_id']))  # noqa: E501
        if 'city_name_pattern' in params:
            query_params.append(('cityNamePattern', params['city_name_pattern']))  # noqa: E501
        if 'area_code' in params:
            query_params.append(('areaCode', params['area_code']))  # noqa: E501

        header_params = {}
        if 'api_key' in params:
            header_params['api_key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/countries/{countryCode}/didgroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def countries_get(self, api_key, **kwargs):  # noqa: E501
        """This API gets a list of countries available in the Fax.to coverage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.countries_get(api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str api_key: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.countries_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.countries_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def countries_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """This API gets a list of countries available in the Fax.to coverage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.countries_get_with_http_info(api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str api_key: (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method countries_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `countries_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'api_key' in params:
            header_params['api_key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/countries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incoming_faxes_get(self, api_key, **kwargs):  # noqa: E501
        """This API gets a list of incoming faxes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incoming_faxes_get(api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str api_key: (required)
        :param str limit: The number of record to return
        :param str page: The page you want to get
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incoming_faxes_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.incoming_faxes_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def incoming_faxes_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """This API gets a list of incoming faxes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incoming_faxes_get_with_http_info(api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str api_key: (required)
        :param str limit: The number of record to return
        :param str page: The page you want to get
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'limit', 'page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incoming_faxes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `incoming_faxes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}
        if 'api_key' in params:
            header_params['api_key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/incoming-faxes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def incoming_faxes_recipient_get(self, recipient, api_key, **kwargs):  # noqa: E501
        """This API gets a list of incoming faxes for a specific recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incoming_faxes_recipient_get(recipient, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param int recipient: The recipient's fax number (required)
        :param str api_key: (required)
        :param str limit: The number of record to return
        :param str page: The page you want to get
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.incoming_faxes_recipient_get_with_http_info(recipient, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.incoming_faxes_recipient_get_with_http_info(recipient, api_key, **kwargs)  # noqa: E501
            return data

    def incoming_faxes_recipient_get_with_http_info(self, recipient, api_key, **kwargs):  # noqa: E501
        """This API gets a list of incoming faxes for a specific recipient  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.incoming_faxes_recipient_get_with_http_info(recipient, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param int recipient: The recipient's fax number (required)
        :param str api_key: (required)
        :param str limit: The number of record to return
        :param str page: The page you want to get
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recipient', 'api_key', 'limit', 'page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method incoming_faxes_recipient_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recipient' is set
        if ('recipient' not in params or
                params['recipient'] is None):
            raise ValueError("Missing the required parameter `recipient` when calling `incoming_faxes_recipient_get`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `incoming_faxes_recipient_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recipient' in params:
            path_params['recipient'] = params['recipient']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}
        if 'api_key' in params:
            header_params['api_key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/incoming-faxes/{recipient}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def numbers_get(self, api_key, **kwargs):  # noqa: E501
        """This API gets a list of numbers to get the current configuration of one or multiple number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.numbers_get(api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str api_key: (required)
        :param str limit: The number of record to return
        :param str page: The page you want to get
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.numbers_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.numbers_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def numbers_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """This API gets a list of numbers to get the current configuration of one or multiple number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.numbers_get_with_http_info(api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str api_key: (required)
        :param str limit: The number of record to return
        :param str page: The page you want to get
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'limit', 'page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method numbers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `numbers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}
        if 'api_key' in params:
            header_params['api_key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/numbers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def provision_numbers_get(self, did_group_id, api_key, **kwargs):  # noqa: E501
        """This API gets a list of provisioned numbers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.provision_numbers_get(did_group_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param int did_group_id: The id of the did group (required)
        :param str api_key: (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.provision_numbers_get_with_http_info(did_group_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.provision_numbers_get_with_http_info(did_group_id, api_key, **kwargs)  # noqa: E501
            return data

    def provision_numbers_get_with_http_info(self, did_group_id, api_key, **kwargs):  # noqa: E501
        """This API gets a list of provisioned numbers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.provision_numbers_get_with_http_info(did_group_id, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param int did_group_id: The id of the did group (required)
        :param str api_key: (required)
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did_group_id', 'api_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method provision_numbers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did_group_id' is set
        if ('did_group_id' not in params or
                params['did_group_id'] is None):
            raise ValueError("Missing the required parameter `did_group_id` when calling `provision_numbers_get`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `provision_numbers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'did_group_id' in params:
            query_params.append(('did_group_id', params['did_group_id']))  # noqa: E501

        header_params = {}
        if 'api_key' in params:
            header_params['api_key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/countries/didgroups/{did_group_id}/provision', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def states_country_code_get(self, country_code, api_key, **kwargs):  # noqa: E501
        """This API gets a list of states of a given country available in the Fax.to coverage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.states_country_code_get(country_code, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param int country_code: Indicates the country code in its ISO 3166-1 alpha-3 format (required)
        :param str api_key: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.states_country_code_get_with_http_info(country_code, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.states_country_code_get_with_http_info(country_code, api_key, **kwargs)  # noqa: E501
            return data

    def states_country_code_get_with_http_info(self, country_code, api_key, **kwargs):  # noqa: E501
        """This API gets a list of states of a given country available in the Fax.to coverage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.states_country_code_get_with_http_info(country_code, api_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param int country_code: Indicates the country code in its ISO 3166-1 alpha-3 format (required)
        :param str api_key: (required)
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country_code', 'api_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method states_country_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country_code' is set
        if ('country_code' not in params or
                params['country_code'] is None):
            raise ValueError("Missing the required parameter `country_code` when calling `states_country_code_get`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `states_country_code_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'country_code' in params:
            path_params['COUNTRY_CODE'] = params['country_code']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_key' in params:
            header_params['api_key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/states/{COUNTRY_CODE}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
